Binlog在该系统中的使用：
涉及到的类：template.json、TemplateHolder、Template、JsonTable、ParseTemplate、TableTemplate、AggregationListener、BinlogEventRowData、IListener
初始化：
首先我们定义了一个template.json文件，这个json文件里声明了数据库名称和数据库下我们业务关心的表和表的优先级、字段信息。
接下来会启动TemplateHolder类，该类中有一个被注解@PostConstruct声明的方法init(),这个方法会被先调用，该方法中又调用了loadJson()方法，loadJson()方法通过上下文类加载器获取到Json文件，然后通过工具类JSON的parseObject方法将json文件转换成对应的Java对象--Template，这个类中定义了数据库的名称和一个包含泛型为JsonTable的List,JsonTable里定义了表名、表的优先级、相关操作（UPDATE、DELETE、INSERT）所关心的column，然后将解析出来的Template赋值给ParseTemplate的parse方法去解析，在该方法中将table和关于该table的一些操作进行解析初始化，具体设计的内容是：每一种操作类型所关心的该表的列，上述“每一种操作类型所关心的列”具体存储在类TableTemplate中，这个类声明了涉及到该数据表的一些操作相关的列。接下来调用loadMeta()方法，该方法主要是完成Binlog中的索引与实际数据表的索引映射。至此该binlog的初始化完成。
监听增量信息并构造索引：
Binlog传递的信息包含在Event中，每一种操作都对应着不同类型的Event，要实现对于Binlog的监听就得实现BinaryLogClient.EventListener接口并实现OnEvent（）方法,该方法时关键。项目中用于实现这个操作的类是AggregationListener,这个类中将我们监听得到的信息转换成BinlogEventRowData形式，由于不同的事件的处理方法是不同的，所以我们同时定义了IListener接口。